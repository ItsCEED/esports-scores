var hyperquest = require('hyperquest');
var cheerio = require('cheerio');
var concat = require('concat-stream');
var moment = require('moment');
var isNaN = require('lodash.isnan');

function parseMatchPage(url, callback) {
  var ret = {};

  var stream = hyperquest(url);

  stream.on('error', callback);

  stream.pipe(concat(function(data) {
    var $ = cheerio.load(data);

    ret.home = {};
    ret.away = {};

    var home = $('.opponent1 a').text();
    var away = $('.opponent2 a').text();
      
    var homecountry = $('.opponent1 span').attr('title');
    var awaycountry = $('.opponent2 span').attr('title');
      
    ret.home.country = homecountry;
    ret.away.country = awaycountry;
      
    var bestof = $('.bestof').text();
    var bestof = bestof.split("Best of ");
      
    ret.bestof = bestof[1];
      
    switch(home) {
        case "3DMAX.CS":
            ret.home.name = "MAX";
            break;
        case "Cloud9.CS":
            ret.home.name = "Cloud9";
            break;
        case "Counter Logic Gaming.CS":
            ret.home.name = "CLG";
            break;
        case "CPH Wolves":
            ret.home.name = "CPH Wolves";
            break;
        case "dAT team":
            ret.home.name = "dAT";
            break;
        case "Denial eSports":
            ret.home.name = "Denial eSports";
            break;
        case "eLevate":
            ret.home.name = "eLevate";
            break;
        case "ESC Gaming":
            ret.home.name = "ESC";
            break;
        case "Flipsid3 Tactics":
            ret.home.name = "Flipsid3";
            break;
        case "fnatic":
            ret.home.name = "fnatic";
            break;
        case "Gamers2":
            ret.home.name = "Gamers2";
            break;
        case "GGWP":
            ret.home.name = "GGWP";
            break;
        case "Gplay":
            ret.home.name = "Gplay";
            break;
        case "HellRaisers":
            ret.home.name = "HellRaisers";
            break;
        case "Keyd Stars.":
            ret.home.name = "Keyd Stars";
            break;
        case "Key-Preisvergleich.de":
            ret.home.name = "KPV";
            break;
        case "LGB eSports":
            ret.home.name = "LGB eSports";
            break;
        case "LunatiK B":
            ret.home.name = "LunatiK";
            break;
        case "mousesports.CS":
            ret.home.name = "mousesports";
            break;
        case "myXMG":
            ret.home.name = "myXMG";
            break;
        case "Natus Vincere":
            ret.home.name = "Navi";
            break;
        case "Ninjas in Pyjamas":
            ret.home.name = "NiP";
            break;
        case "PENTA Sports":
            ret.home.name = "PENTA";
            break;
        case "Playing-Ducks":
            ret.home.name = "Ducks";
            break;
        case "SapphireKelownaDotCom":
            ret.home.name = "SKDC";
            break;
        case "Team Dignitas.CS":
            ret.home.name = "Dignitas";
            break;
        case "Team EnVyUs":
            ret.home.name = "EnVyUs";
            break;
        case "Team Liquid.CS":
            ret.home.name = "Liquid";
            break;
        case "Team Orbit":
            ret.home.name = "Orbit";
            break;
        case "Team Property.CS":
            ret.home.name = "Property";
            break;
        case "Team Solomid.":
            ret.home.name = "TSM";
            break;
        case "Titan.CS":
            ret.home.name = "Titan";
            break;
        case "TMP":
            ret.home.name = "TMP";
            break;
        case "Virtus.Pro.CS":
            ret.home.name = "Virtus Pro";
            break;
        case "VOLGARE":
            ret.home.name = "VOLGARE";
            break;
        case "VOX EMINOR":
            ret.home.name = "VOX EMINOR";
            break;
        case "WiLD.CM":
            ret.home.name = "WiLD";
            break;
        case "Wrecking Gaming":
            ret.home.name = "Wrecking";
            break;
        case "x6tence":
            ret.home.name = "x6tence";
            break;
        default:
            ret.home.name = home;
            break;
    }
      
    switch(away) {
        case "3DMAX.CS":
            ret.away.name = "MAX";
            break;
        case "Cloud9.CS":
            ret.away.name = "Cloud9";
            break;
        case "Counter Logic Gaming.CS":
            ret.away.name = "CLG";
            break;
        case "CPH Wolves":
            ret.away.name = "Copenhagen Wolves";
            break;
        case "dAT team":
            ret.away.name = "dAT";
            break;
        case "Denial eSports":
            ret.away.name = "Denial eSports";
            break;
        case "eLevate":
            ret.away.name = "eLevate";
            break;
        case "ESC Gaming":
            ret.away.name = "ESC";
            break;
        case "Flipsid3 Tactics":
            ret.away.name = "Flipsid3";
            break;
        case "fnatic":
            ret.away.name = "fnatic";
            break;
        case "Gamers2":
            ret.away.name = "Gamers2";
            break;
        case "GGWP":
            ret.away.name = "GGWP";
            break;
        case "Gplay":
            ret.away.name = "Gplay";
            break;
        case "HellRaisers":
            ret.away.name = "HellRaisers";
            break;
        case "Keyd Stars.":
            ret.away.name = "Keyd Stars";
            break;
        case "Key-Preisvergleich.de":
            ret.away.name = "KPV";
            break;
        case "LGB eSports":
            ret.away.name = "LGB eSports";
            break;
        case "LunatiK B":
            ret.away.name = "LunatiK";
            break;
        case "mousesports.CS":
            ret.away.name = "mousesports";
            break;
        case "myXMG":
            ret.away.name = "myXMG";
            break;
        case "Natus Vincere":
            ret.away.name = "Navi";
            break;
        case "Ninjas in Pyjamas":
            ret.away.name = "NiP";
            break;
        case "PENTA Sports":
            ret.away.name = "PENTA";
            break;
        case "Playing-Ducks":
            ret.away.name = "Ducks";
            break;
        case "SapphireKelownaDotCom":
            ret.away.name = "SKDC";
            break;
        case "Team Dignitas.CS":
            ret.away.name = "Dignitas";
            break;
        case "Team EnVyUs":
            ret.away.name = "EnVyUs";
            break;
        case "Team Liquid.CS":
            ret.away.name = "Liquid";
            break;
        case "Team Orbit":
            ret.away.name = "Orbit";
            break;
        case "Team Property.CS":
            ret.away.name = "Property";
            break;
        case "Team Solomid.":
            ret.away.name = "TSM";
            break;
        case "Titan.CS":
            ret.away.name = "Titan";
            break;
        case "TMP":
            ret.away.name = "TMP";
            break;
        case "Virtus.Pro.CS":
            ret.away.name = "Virtus Pro";
            break;
        case "VOLGARE":
            ret.away.name = "VOLGARE";
            break;
        case "VOX EMINOR":
            ret.away.name = "VOX EMINOR";
            break;
        case "WiLD.CM":
            ret.away.name = "WiLD";
            break;
        case "Wrecking Gaming":
            ret.away.name = "Wrecking";
            break;
        case "x6tence":
            ret.away.name = "x6tence";
            break;
        default:
            ret.away.name = away;
            break;
    }

    ret.home.roster = [];
    ret.away.roster = [];

    var players = $('.opponent-left td.player');
    players.each(function(i, e) {
      var player = $('a', e).text();
      if (ret.home.roster.indexOf(player) > -1) {
        return;
      }
      ret.home.roster.push(player);
    });

    var players = $('.opponent-right td.player');
    players.each(function(i, e) {
      var player = $('a', e).text();
      if (ret.away.roster.indexOf(player) > -1) {
        return;
      }
      ret.away.roster.push(player);
    });

    ret.score1 = parseInt($('.vs .hidden').children().first().text(), 10);
    ret.score2 = parseInt($('.vs .hidden').children().last().text(), 10);

    ret.date = moment($('.datetime').text() + ' +0100', 'MMMM DD, dddd, HH:mm ZZ').unix();

    var games = $('.roundset.totals');
    if (games.length) {
      ret.rounds = [];

      games.each(function(i, e) {
        var home = parseInt($('span.home.score', e).text(), 10);
        if (isNaN(home)) {
          return;
        }

        var round = ret.rounds[i] = {};
        round.home = home;
        round.away = parseInt($('span.away.score', e).text(), 10);
      });

      if (!ret.rounds.length) {
        delete ret.rounds;
      }
    } else {
        ret.rounds = [{"home":0,"away":0}];
    }

    callback(null, ret);
  }));
}

module.exports = parseMatchPage;
